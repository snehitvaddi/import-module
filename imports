import os
import json

def reformat_all_cluster_files(folder_path):
    """
    Read all Batch_rebalanced_*.json files in the given folder,
    reformat them with the expected column order, and save them back.
    
    Args:
        folder_path: Path to the folder containing the JSON files
    """
    # Expected columns in the desired order
    expected_columns = [
        'ArticleNumber', 'CHANNELS', 'Title', 'BW_Article_Details_c', 
        'Last_Published_Date', 'highlight_chunk', 'version_number', 
        'final_sim_score', 'ROLES', 'URL'
    ]
    
    # Find all batch_rebalanced_*.json files
    files_processed = 0
    for filename in os.listdir(folder_path):
        if filename.startswith("Batch_rebalanced_") and filename.endswith(".json"):
            file_path = os.path.join(folder_path, filename)
            print(f"Processing {filename}...")
            
            try:
                # Read the JSON file
                with open(file_path, 'r', encoding='utf-8') as f:
                    try:
                        data = json.load(f)
                    except json.JSONDecodeError:
                        print(f"  ERROR: {filename} is not a valid JSON file. Skipping.")
                        continue
                
                # Reformat each record
                reformatted_data = []
                for record in data:
                    # Fix column names by removing escapes and quotes
                    fixed_record = {}
                    for key, value in record.items():
                        clean_key = key.replace('\\', '').replace('\"', '')
                        fixed_record[clean_key] = value
                    
                    # Create a new ordered record with expected columns first
                    ordered_record = {}
                    
                    # Add expected columns in order (if they exist)
                    for col in expected_columns:
                        if col in fixed_record:
                            ordered_record[col] = fixed_record[col]
                    
                    # Add any remaining columns
                    for key, value in fixed_record.items():
                        if key not in ordered_record:
                            ordered_record[key] = value
                    
                    reformatted_data.append(ordered_record)
                
                # Write the reformatted data back to the file
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(reformatted_data, f, indent=2, ensure_ascii=False)
                
                print(f"  SUCCESS: Reformatted {filename} with {len(reformatted_data)} records")
                files_processed += 1
                
            except Exception as e:
                print(f"  ERROR: Failed to process {filename}: {e}")
    
    print(f"Reformatting complete: {files_processed} files processed")

# Example usage:
# Just change this to your actual output folder path
output_folder = "./output_clusters"
reformat_all_cluster_files(output_folder)
